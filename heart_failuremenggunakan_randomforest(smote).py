# -*- coding: utf-8 -*-
"""Heart Failuremenggunakan Randomforest(SMOTE).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W9ipVCcA5vOpHHpVBMbRg96sAPdC6VgD

# **HEART FAILURE PREDICTION**

**PERSIAPAN**

**Mengimport Package Yang Dibutuhkan**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('darkgrid')
from sklearn.preprocessing import StandardScaler , LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report

"""**Load Dataset**"""

from google.colab import files
uploaded = files.upload()
df = pd.read_csv('heart_failure.csv')
df.head()

df

"""Penjelasan kolom : 

Event_dead 0 => Pasien Selamat

event_dead 1 => Pasien Meninggal

age = Usia Pasien (tahun )

anemia: Penurunan sel darah merah atau hemoglobin (0 = No, 1 = Yes)

creatinine_phosphokinase: Tingkat enzim CPK dalam darah (mcg/L)

diabetes: Apakah pasien memiliki diabetes? (0 = No, 1 = Yes)

ejection_fraction: Fraksi ejeksi (EF) adalah pengukuran, dinyatakan sebagai persentase, dari berapa banyak darah yang dipompa ventrikel kiri dengan setiap kontraksi (%)

high_blood_pressure :Apakah pasien memiliki hipertensi? (0 = No, 1 = Yes)

serum_kreatinin:Kandungan kreatinin didalam darah (mg/dL)

serum_sodium: Kandungan sodium didalam darah (mEq/L)

Sex = Jenis Kelamin (0 = Female, 1= Male)

Smoking = Apakah pasien merokok (0 = No, 1 = Yes)

Platelets = Kandungan trombosit didalam darah (Kiloplatelets/mL)

Time = Periode follow up (Hari)

**DATA PRAPROCESSING**

**Melihat Dimensi Data**
"""

print('Dataset ini terdiri dari {0} baris dan {1} kolom'.format(df.shape[0], df.shape[1]))

"""**Melihat Info Dataset**"""

df.info()

"""**Melihat ringkasan statistika deskriptif dari dataset**"""

df.describe().T

"""Sex - Gender of patient Male = 1, Female =0

Age - Age of patient

Diabetes - 0 = No, 1 = Yes

Anaemia - 0 = No, 1 = Yes

High_blood_pressure - 0 = No, 1 = Yes

Smoking - 0 = No, 1 = Yes

DEATH_EVENT - 0 = No, 1 = Yes

**EDA (EXPLORATORY DATA ANALYSIS )**

Proporsi Label Death_Event
"""

print('Distribusi label Death_event\n', df['DEATH_EVENT'].value_counts())

plt.figure(figsize=(8,8))
label = df['DEATH_EVENT'].value_counts()
plt.pie(label.values , labels=label.index, autopct= '%1.1f%%')
plt.title('Proporsi Kolom Death_Event', fontsize=20)
plt.show()

"""Dapat dilihat dari Pie Cart diatas bahwa proporsi label Even_Death adalah imbalance. hal ini perlu dilakukan treatment khusus karena label yang imbalance akan mempengaruhi kualitas model. Untuk mengatasi imbalance tersebut akan dilakukan teknik SMOTE ( Synthetic Minority Oversampling Technique)

Distribusi Data
"""

fig, ax = plt.subplots(3,3, figsize=(12,10))
ax[0][0].hist(df['age'])
ax[0][1].hist(df['creatinine_phosphokinase'])
ax[0][2].hist(df['ejection_fraction'])
ax[1][0].hist(df['platelets'])
ax[1][1].hist(df['serum_creatinine'])
ax[1][2].hist(df['serum_sodium'])
ax[2][0].hist(df['time'])

ax[0][0].set_xlabel('age')
ax[0][1].set_xlabel('creatinine_phosphokinase')
ax[0][2].set_xlabel('ejection_fraction')
ax[1][0].set_xlabel('platelets')
ax[1][1].set_xlabel('serum_creatinine')
ax[1][2].set_xlabel('serum_sodium')
ax[2][0].set_xlabel('time')

plt.show()

"""Dari histogram diatas dapat disimpulkan bahwa : 

•	Kebanyakan pasien berusia 60-70 tahun

•	Pasien paling banyak mempunyai nilai serum creatin dengan nilai 0

•	Ejection tertinggi yaitu dengan nilai 40

•	Nilai platelets pasien paling banyak berkisar diantara 300000 – 400000

•	Serum creatinine terbanyak berada pada nilai 0

•	Distribusi serum sodium cenderung terkumpul disebelah kanan

•	Distribusi time cukup normal

Count Plot
"""

sns.countplot(df['anaemia'], label='count')
plt.show()

sns.countplot(df['diabetes'], label='count')
plt.show()

sns.countplot(df['high_blood_pressure'], label='count')
plt.show()

sns.countplot(df['sex'], label='count')
plt.show()

sns.countplot(df['smoking'], label='count')
plt.show()

"""**Multivariat Analisis**"""

sns.pairplot(df, hue='DEATH_EVENT', corner=True)
plt.show()

"""DATA CLEANSING

Mengecek Missing Value
"""

print('Jumlah Missing Value dari setiap kolom : \n', df.isnull().sum())

"""Tidak terdapat Missing Values dari setiap kolom, sehingga tidak diperlukan handling Missing values, tahap selanjutnya adalah melihat korelasi dari tiap kolom terhadap label yaitu Death_Event

Feature Selection

Proses selanjutnya adalah melakukan feature selection yaitu memilih feature/kolom yang mempunyai hubungan yang kuat  terhadap label sehingga dapat mempengaruhi kualitas performa model yang akan dibuat. Proses feature selection ini menggunakan  heatmap dari library seaborn yang akan memberikan visualisasi tingkat warna serta nilai korelasi dari setiap feature terhadap label. 
Korelasi adala salah satu metode statistika yang dapat digunakan untuk mengukur seberapa besar hubungan antara satu variabel dengan variabel lainnya. Nilai dari korelasi tersebut digunakan untuk mengukur kekuatan hubungan linier antara dua variabel serta dapat menentukan arah dari korelasi tersebut apakah negatif atau positif. 

Hubungan antar variabel dikatakan positif apabila nilai salah satu variabel naik, maka nilai variabel lainnya juga naik. Sebaliknya, hubungan antar variabel dikatakan negatif apabila nilai salah satu variabel naik maka variabel yang lainnya turun. 
Suatu variabel dikatakan berkorelasi positif kuat apabila nilai koefisisen korelasi lebih besar dari 0.5 dan dikatakan berkorelasi negatif kuat apabila nilai koefisien korelasi lebih besar dari -0.5.
"""

plt.figure(figsize=(11,10))
sns.heatmap(df.corr(), annot=True)

plt.show()

"""Berdasarkan Heatmap diatas hampir semua kolom memiliki korelasi yang lemah terhadap label. Tahap feature selection ini akan memilih 3 feature yang mempunyai nilai korelasi yang lebih tinggi dibandingkan feature lain. Feature yang dipilih yaitu time yang mempunyai nilai korelasi -0.53, ejection_fraction yang mempunyai nilai korelasi -0.27 dan serum_creatinine yang mempunyai nilai korelasi 0.29. Dari ketiga feature yang dipilih yang mempunyai hubungan korelasi positif adalah feature serum_creatinine. Sedangkan feature yang mempunyai hubungan korelasi negative adalah time dan ejection_fraction. """

features = df.drop(['anaemia','creatinine_phosphokinase','diabetes','high_blood_pressure','platelets','sex','smoking','age', 'serum_sodium'],axis=1)

"""Membuat objek baru bernama features untuk menampung fitur/kolom yang telah dilakukan feature selection"""

features

"""Finding and handling Outliers

Pada tahap ini akan dilakukan visualisasi box plot pada feature yang telah dilakukan proses feature selection dan dengan memerhatikan rangkuman statistik deskriptif yang telah dilakukan pada proses sebelumnya. Pada rangkuman statistik deskriptif  dapat dilihat bahwa kolom ejection_fraction diperkirakan memiliki outlier. Selanjutnya melakukan visualisasi box plot pada kolom ejection_fraction. 

Suatu Data point dikatakan outliers apabila data tersebut berada diluar boxplot (batas bawah maupun batas atas).
"""

sns.boxplot(features['ejection_fraction'])
plt.show()

"""Berdasarkan Boxplot diatas dapat dilihat bahwa terdapat 2 data poin yang berada diluar whisker pada box plot. Box plot terdiri dari box dan whisker. Panjang dari box sesuai dengan IQR, sedangkan whisker merupakan batas bawah dan batas atas  untuk menentukan outlier.  Suatu data poin disebut outlier apabila data poin tersebut berada diluar whisker atau memenuhi kondisi seperti perhitungan dibawah ini : 

•	Data poin < Batas Bawah

= Data poin < Q1 - (1,5*IQR)

•	Data poin > Batas Atas

= Data poin > Q3 + (1,5*IQR)

Pada box plot diatas data poin 70 dan 80 merupakan outlier berdasarkan perhitungan dibawah ini : 

Diketahui : 

Q1 = 30

Q3 = 45

IQR = Q3 – Q1 = 45-30 = 15

Batas Atas = Q3 + (1,5*IQR) 

= 45 + (1,5*15)

= 45 + (22,5) 

= 67,5

Berdasarkan perhitungan batas atas diatas, data poin 70 dan 80 lebih besar daripada batas atas.

Handling Outliers

Proses selanjutnya adalah menangani outlier tersebut dengan cara memfilter data poin yang lebih besar dari Q1- (1,5*IQR) atau data poin yang lebih kecil dari Q3 + (1,5*IQR). disini akan dilakukan filtering data poin yang lebih kecil dari 70, karena 70 merupakan outlier.
"""

features = features[features['ejection_fraction']<70]

"""Menegcek kembali apakah masih terdapat outliers dalam fitur/kolom ejection_fraction"""

sns.boxplot(features['ejection_fraction'])
plt.show()

"""Berdasarkan Boxplot diatas sudah tidak terdapat outlier pada Boxplot

**Pembagian Dataset / Split Data**

Proses ini membagi dataset kedalam variabel x (untuk fitur/kolom) dan y (untuk label )
"""

x = features.drop('DEATH_EVENT', axis=1)
y = features['DEATH_EVENT']

print ('Kolom Feature : ')
x

print('Label :')
display(y)

"""Handling Oversampling with SMOTE (Synthetic Minority Oversampling Technique)

Teknik SMOTE dapat menangani masalah data imbalance pada label dengan cara mensintesis data atau membuat replikasi data kelas minor agar setara dengan kelas data mayor. 
"""

from imblearn.over_sampling import SMOTE

oversample = SMOTE()
x, y = oversample.fit_resample(x, y)

"""Mengecek Proporsi Label yaitu DEATH_EVENT"""

sns.countplot(y)

"""Berdasarkan Countplot diatas proporsi kelas data 0 dan kelas data 1 pada label telah seimbang

Pembagian Data Training dan Data Testing dengan Persentase 80% dan 20%
"""

#Pembagian Data Training 80% Data Testing 20%
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

"""Feature Scalling

Proses feature scaling ini bertujuan agar setiap data mempunyai range nilai yang sama terhadap data yang lain. Proses feature scaling yang digunakan adalah StandardScaler. 
"""

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

print('Nilai x_train :')
print(x_train)

print('Nilai x_test :')
print(x_test)

"""**Pelatihan Data**"""

#Training model Random forest
from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators = 10, criterion='entropy', random_state=0)
forest.fit(x_train, y_train)

"""**Pengujian Model**

Confusion Matrix
"""

print('Training Accuracy :', forest.score(x_train, y_train))
print ('Testing Accuracy:', forest.score(x_test, y_test))
#Confusion Matrix
print('\nConfusion Matrix :')
y_pred = forest.predict(x_test)
cm = confusion_matrix(y_test, y_pred)
print(cm)

"""Pada confusion matrix terdapat 4 nilai yaitu True Positive, False Positive, False Negative dan True Negative. True Positive merupakan data positif yang diprediksi benar. Pada Gambar diatas nilai True Positive sebesar 38. 

Selanjutnya False Positive adalah data negatif yang diprediksi benar, pada Gambar diatas  angka 2 merupakan nilai False Positive. Selanjutnya adalah False Negative yaitu data negatif namun diprediksi sebagai data positif, pada Gambar diatas angka 2 merupakan False Negative. Kemudian True Negative adalah data positif namun diprediksi sebagai data negatif. Pada Gambar diatas angka 39 merupakan nilai True Negative.

Classification report
"""

#Classification report
print('\nClassification report:')
cr = classification_report(y_test, y_pred)
print(cr)

"""Classification report merupakan evaluasi model yang dapat menghitung metrik seperti precision, recall, accuracy, dan f1 score. 

Berdasarkan Gambar diatas hasil precision kelas data 0 s ebesar 95%, precision kelas data 1 sebesar 95%, recall kelas data 0 sebesar 95%, recall kelas data 1 sebesar 95%, f1-score kelas data 0 sebesar 95%, f1-score kelas data 1 sebesar 95% dan accuracy model sebesar 95%. 
"""